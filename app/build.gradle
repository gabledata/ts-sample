
plugins{
  id 'base'
  id "com.github.node-gradle.node" version "2.2.4"
}

ext {
  tsSrcDir = file("src")
  // this is the directory c-r-a seems to build into by default
  npmBuildDir = file("build")

  envName = System.getProperty("cabbage_build_env_name", "dev")
}

/* The node.js and npm dependencies get downloaded to the ".gradle"
sub-directory of THIS project's "project directory".  Meaning a multi-project
gradle build with multiple sub-projects that use the gradle-node plugin each
download their own node.js, npm and dependencies.  This is wasteful of both
disk space and time (server-builds, for example, may download the same stuff
many times).  But it keeps each sub-project completely separate and stops
unintended dependencies between them.
*/
node {
  /* set to NOT force download node, so that CI build stuff will use
     pre-installed if correct version is available */
  download = false
  /* I don't like sliding versions, this is just the version that happened
     to be marked LTS on 2020-11-27 */
  version = '14.15.1'
}

tasks.withType(NpmTask){
  // propagate the environment of the Gradle process to the NPM process
  environment = System.getenv()
}

clean {
  delete npmBuildDir
}

task cleanNodeModules(type: Delete){
  group "build"
  delete file("node_modules")
}

task buildApp(type: NpmTask){
  dependsOn npmInstall
  mustRunAfter clean, cleanNodeModules
  group = 'build'

  // no upToDate checking, if invoked will always run
  outputs.upToDateWhen { false }

  args = [
    'run', 'build',
  ]

  // TODIDNT:STO add supabase env config
  environment = [
    REACT_APP_CABBAGE_ENV: project.ext.envName,
    // browser date parsing is super broken, using millis is just easier
    REACT_APP_BUILD_DATE_MS: new Date().time,
  ]
}



